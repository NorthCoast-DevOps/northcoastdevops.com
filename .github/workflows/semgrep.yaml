# .github/workflows/semgrep-scan-latest-release.yml
name: Weekly Semgrep Security Scan on Latest Release

on:
  schedule:
    - cron: '0 7 * * 0'  # Runs at 7am UTC every Sunday
  workflow_dispatch:  # Enables manual run from the Actions tab

permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  semgrep_scan:
    runs-on: ubuntu-latest

    steps:
    - name: Determine latest release or fallback to main or master
      id: get_latest_release
      run: |
        # Fetch latest release tag
        latest_release=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name')

        # If no release, check if 'main' or 'master' branches exist using GitHub API
        if [[ "$latest_release" == "null" ]]; then
          echo "No release found. Checking for main or master branch."
          branches=$(curl -s https://api.github.com/repos/${{ github.repository }}/branches | jq -r '.[].name')
          
          if [[ "$branches" == *"main"* ]]; then
            latest_release="main"
          elif [[ "$branches" == *"master"* ]]; then
            latest_release="master"
          else
            echo "No release, main, or master branch found. Exiting..."
            exit 1
          fi
        fi
        
        echo "latest_release=$latest_release" >> $GITHUB_ENV

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ env.latest_release }}

    - name: Set up Python virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
      shell: bash

    - name: Cache Semgrep
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Semgrep
      run: |
        source venv/bin/activate
        pip install --upgrade semgrep
      shell: bash

    - name: Run Semgrep scan
      run: |
        source venv/bin/activate
        semgrep --config=p/ci --sarif --output=semgrep-results.sarif
      shell: bash

    - name: Generate summary report
      run: |
        echo "## Semgrep Scan Summary" >> $GITHUB_STEP_SUMMARY
        semgrep_results=$(jq '.results | length' semgrep-results.sarif)
        echo "Total Issues Found: $semgrep_results" >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Upload Semgrep results as artifact
      uses: actions/upload-artifact@v3
      with:
        name: semgrep-results
        path: semgrep-results.sarif

    - name: Upload results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3  # Updated to v3
      with:
        sarif_file: semgrep-results.sarif
      env:  # Ensures the action has access to the necessary resources
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
